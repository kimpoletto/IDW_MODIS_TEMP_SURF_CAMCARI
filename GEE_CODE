var bahia = ee.FeatureCollection("projects/ee-murilloalcosta/assets/Bahia/BA_Municipios_2022");

var cairu = bahia.filter(ee.Filter.eq('NM_MUN','Camaçari'));

Map.addLayer(cairu, {color: '#9F0D7F', opacity: 0.5}, 'Cairu');
Map.centerObject(cairu, 10);

//Coleção .
function scale(image){
  return image.multiply(0.02).subtract(273).clip(cairu).copyProperties(image,image.propertyNames())
}

// Coleção Chirpsz
var MODIS = ee.ImageCollection('MODIS/061/MOD11A1')
               .filterBounds(cairu)
               .filter(ee.Filter.date('2022-01-01', '2022-12-31'));

//acumulando os dados de precipitação por pixel
var temperature = MODIS.select('LST_Day_1km')
                          .map(scale)
                          .mean()
                          .clip(cairu).rename('temperature');
                          
// definindo valores de visualização

var temperatureVis = {
  min: 24.678448275862074,
  max: 30,
  palette: ['blue','cyan','yellow','orange','red'
            ]
};

Map.addLayer(temperature, temperatureVis, 'Temperature');

var samples = temperature.addBands(ee.Image.pixelLonLat())
                           .sample({
                             region: cairu,
                             scale: 100,
                             numPixels: 3000}).map(function(sample){
                                var lat = sample.get('latitude');
                                var lon = sample.get('longitude');
                                var temp = sample.get('temperature');
                                return ee.Feature(ee.Geometry.Point([lon, lat]), {temperature: temp});
                            });
                            
var samples = ee.FeatureCollection(samples);
print(samples);

// combinando media e desvio padrao para eficiencia
var combinedReducer = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true});

// Estima media global e desvio padrao dos pontos
var stats = samples.reduceColumns({
  reducer: combinedReducer,
  selectors: ['temperature']});

var stdDev = stats.get('stdDev');
print(stdDev);

var interpolated = samples.inverseDistance({
  range: 5000,
  propertyName: 'temperature',
  mean: stats.get('mean'),
  stdDev: stats.get('stdDev'),
  gamma: 0.5
});
 

Map.addLayer(interpolated.clip(cairu), temperatureVis, 'Temperatura Anual Acumulada');
